
// les  variables permettent de stocker des donn√©es

// mots-cl√©s pour cr√©er une variable : var let const

// var = ancienne syntaxe (d√©conseill√©)
// let = nouvelle syntaxe ES6


// cr√©ation de la variable
let myVariable;  

// assignation d'une valeur √† la variable
myVariable = 'valeur de la variable';  

// les deux op√©rations en une seule ligne
let myVariable2 = 'nouvelle variable';  

// d√©clarer plusieurs variables en m√™me temps
let myVariable3, myVariable4, myVariable5 = 'valeur de myvariable5';

// const pour une variable dont la valeur ne peut pas √™tre chang√©e
const PI = 3.14116;
// PI = 25;  ‚ùå INTERDIT

/* 
REGLES POUR NOMMER UNE VARIABLE:

‚ùå pas de mots-cl√©s du langage JS
‚ùå pas de caract√®res sp√©ciaux, except√© _ et $ 
‚ùå ne doit pas commencer par un chiffre
‚ùå ne doit pas contenir d'espace

‚úÖ le nom choisi doit √™tre le plus significatif possible

*/

// types d'√©critures des variables :

// camelCase
let newUserLastName;

// snake_case
let new_user_first_name;



// les diff√©rents types de valeurs stockables dans une variable //

/*
string
number
boolean
object 
function
undefined
null
symbol
*/

// ................................................... //
// ........ type string (cha√Æne de caract√®res) ........ // 
// ................................................... //

// tout ce qui est entre des guillemets est consid√©r√© comme un string (m√™me des nombres)

let str = 'cha√Æne de caract√®res';
let str2 = "autre cha√Æne de caract√®res";
let strNumb = '36';
let quoteMakeString = '45 / 5 * 8';

// pour pouvoir utiliser des guillemets dans une string, il faut placer un \ avant
let str3 = 'je m\'appelle Philippe etj\'ai 30ans';


// ... concatenation ... //
// mettre bout a bout des cha√Ænes de caract√®res avec le symbole +

let firstName = 'Filip';
let lastName = 'Lanougadere';

console.log(firstName + ' a ' + 36 + ' ans');  // 'Filip a 36 ans'
let greetings = 'je m\'appelle ' + firstName + ' ' + lastName;
// 'je m'appelle Filip Lanougadere'

// le + transforme les nombres en cha√Ænes de caract√®res si une string se trouve avant ou apr√®s
let passWord = 45 + 'xxx' + 12;  // '45xxx12'



// ... template strings avec les backtiks `` (alt gr + 7) ... //

// on place les variables entre les symboles ${} 
let greetings2 = `je m'appelle ${firstName} ${lastName}`;


// ................................................... //
// ............... type number ..................... // 
// ................................................... //

let number = 45 + 78 * 45;  // 3555
let decimalNumber = 1.75;  // avec un point √† la place de la virgule

let number2 = 14 * 4 + 6;  // 62
let number3 = 14 * (4 + 6);  // (m√™mes r√©gles de priorit√©s qu'en Math)

let count = 1;


// ... syntaxe raccourci pour combiner une assignation et un calcul ... //

count = count + 10;  // 11
count += 10;  // 21

count -= 10;  // 11
count *= 4;  // 44 


// ... INCREMENTATION (ajout de 1) ... //

count = count + 1; // 45
count++; // 46

console.log(count++);  //  46
console.log(count);  //  47

console.log(++count);  // 48
console.log(count);   // 48 

count--; // 47
--count; //46

// ... NaN (Not a Number) ... //

/* 
math√©matiquement pas valide
(si on essaie de faire une op√©ration math√©matique entre des nombres et autre chose que des nombres)
s'il le peut, JavaScript tente de convertir les valeurs pour pouvoir r√©aliser l'op√©ration demand√©e 
*/

let nan = 'str' * 2;  // NaN   --> op√©ration impossible
let notNan = '42' * 2;  // 84   --> '42' converti en number
let notNan2 = '42' + 2;  // '422'  --> 2 converti en string


// ................................................... //
// ............... type boolean ..................... // 
// ................................................... //

// uniquement 2 valeurs possibles : true ou false (sans guillemets)

let isUserLogged = true;

/*
en JavaScript, tout est √©valu√© true sauf certaines valeurs 

valeurs √©valu√©es false :
undefined - false - NaN - Null - 0 (z√©ro) -  '' (string vide)


// ................................................... //
// ............... type undefined ..................... // 
// ................................................... //

/* 
une variable est cr√©√©e mais pas de valeur lui est assign√©e

üõë diff√©rent de 'is not defined' (la variable n'existe pas)

undefined : type de valeur
is not defined : erreur
*/

// ................................................... //
// ............... type object ..................... // 
// ................................................... //

let arr = ['str', 45, true, function(){}, [1, 2, 3]];

typeof arr;  //  object

arr.length; // 5  (nombre d'√©l√©ments d'un tableau en partant de 1)

arr[0]; // --> 'str'   (1er √©l√©ment du tableau : √† l'index 0)

// --> l'index du dernier √©l√©ment d'un tableau est toujours length-1

arr[4][1];  //  --> 2 (2eme √©l√©ment du 3√®me √©l√©ment)
arr[arr.length - 1][1]; // --> 2 (2eme √©l√©ment de l'avant-dernier √©l√©ment)


let user = {
    firstName: 'Ali',
    age: 25,
    dev: true
}

typeof user; // object

user.firstName; // 'Ali'


